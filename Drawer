import turtle

class Drawer:
        #inititalizing constructor
        def __init__(self):
            self.canvas = turtle.Screen()
            self.canvas.setup(width = .99, height = .99)
            self.windowHeight = self.canvas.window_height() - 100
            self.windowWidth = self.canvas.window_width() - 100
            self.pen = turtle.Turtle()
            self.pen.hideturtle()
            self.pen.speed(0)
            self.pen.penup()
            self.pen.goto(- self.windowWidth / 2, self.windowHeight / 2)
            self.pen.color("black")
            self.pen.pendown()
            self.canvas.exitonclick()
        
        #Returns x/y coordinates of the pen on the canvas
        def get_xcor():
            return self.pen.xcor()

        def get_ycor():
            return self.pen.ycor()

        #Sets the pen to the top left corner, setheading(270) faces the pen south
        def vertical_reset():
            self.pen.hideturtle()
            self.pen.speed(0)
            self.pen.penup()
            self.pen.goto(- self.windowWidth / 2, self.windowHeight / 2)
            self.pen.color("black")
            self.pen.pendown()
            self.pen.setheading(270)
        
        #Method for Drawing segments of the morse code
        def drawSegmentXAxis(self, segment_length, pen_size):
            drawSegment(segment_length, pen_size, self.windowWidth / 2, - self.windowWidth / 2, self.pen.ycor() - 8)

        def drawSegmentYAxis(self, segment_length, pen_size):
            drawSegment(segment_length, pen_size, FINALycorPOSITION, self.pen.xcor() + 8, self.windowHeight / 2)

        def drawSegment(self, segment_length, pen_size, final_postion, next_line_start_x, next_line_start_y):
            self.pen.pensize(pen_size)
            if ((self.pen.xcor() + segment_length) >= final_postion):
                self.pen.penup()
                self.pen.goto(next_line_start_x, next_line_start_y)
            self.pen.pendown()
            self.pen.forward(segment_length)
